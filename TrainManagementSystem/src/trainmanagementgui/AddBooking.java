package trainmanagementgui;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;



public class AddBooking extends javax.swing.JFrame {

    myDBCon dbCon;
    ResultSet rs, rs2;
    int customerid;
    boolean isSelectedRoute = false;
    boolean isSelectedTrainLine = false;
    boolean isSelectedDepartureTime = false;
    int routeid, trainid;
    String deptTime;

   
    public AddBooking(int customerid){
        initComponents();
        this.customerid=customerid;
        // center form in screen 
        this.setLocationRelativeTo(null);

        
        cmbTrainLine.setEnabled(false);
        cmbDepartureTime.setEnabled(false);
        btnAddBooking.setEnabled(false);

        
      
        dbCon = new myDBCon();
        
        try {
      
            rs = dbCon.executeStatementQuery("SELECT stationname " +
            "FROM Allocation INNER JOIN Routes ON ROUTES.RouteID=Allocation.RouteID " +
            "INNER JOIN LOCATION ON ROUTES.Origin=LOCATION.LocationID " +
            "ORDER BY Allocation.AllocationID ASC");
            rs2 = dbCon.executeStatementQuery("SELECT stationname " +
            "FROM Allocation INNER JOIN Routes ON ROUTES.RouteID=Allocation.RouteID " +
            "INNER JOIN LOCATION ON ROUTES.Destination=LOCATION.LocationID " +
            "ORDER BY Allocation.AllocationID ASC");
            
            while(rs.next() && rs2.next()){
                cmbRoute.addItem(rs.getString("stationname") + " -> "+rs2.getString("stationname"));
            }

            rs.close();
            rs2.close();
           
        } catch (SQLException e) {
             System.out.println(e);
        }
        
        getNewBookingId();
    }
    
        public boolean isInteger(String s) {
        try {
            Integer.parseInt(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }


    
        private void getNewBookingId() {

        String str;
        try {
            // populate CustomerID field
            rs = dbCon.executeStatementQuery("select MAX(BookingID) as BookingID from Bookings");
        
            while (rs.next()) {
                str = rs.getString("BookingID");
                if (str==null){
                    txtBookingID.setText("1");
                }
                else{
                    int temp = Integer.parseInt(str);
                    txtBookingID.setText(String.valueOf(++temp));
                }
            }


        } catch (SQLException e) {
            javax.swing.JLabel label = new javax.swing.JLabel("SQL Error - Error Generating BookingID");
            label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }
        
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnAddBooking = new javax.swing.JButton();
        cmbTrainLine = new javax.swing.JComboBox<>();
        cmbRoute = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        txtBookingID = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtTicketCost = new javax.swing.JTextField();
        cmbDepartureTime = new javax.swing.JComboBox<>();
        btnPrev = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add New Employee");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Create a new Booking");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Booking ID:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Route:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Trainline: ");

        btnAddBooking.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnAddBooking.setText("Create Booking");
        btnAddBooking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddBookingActionPerformed(evt);
            }
        });

        cmbTrainLine.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        cmbRoute.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("Departure Time:");

        txtBookingID.setEditable(false);
        txtBookingID.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("Ticket Cost ($) : ");

        txtTicketCost.setEditable(false);
        txtTicketCost.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        cmbDepartureTime.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        btnPrev.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnPrev.setText("Previous");
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });

        btnNext.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnNext.setText("Next");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(101, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(201, 201, 201))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnAddBooking)
                        .addGap(225, 225, 225))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtBookingID, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbRoute, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbTrainLine, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbDepartureTime, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTicketCost, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(225, 225, 225)
                        .addComponent(btnPrev, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtBookingID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbRoute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cmbTrainLine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cmbDepartureTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(txtTicketCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPrev)
                    .addComponent(btnNext))
                .addGap(18, 18, 18)
                .addComponent(btnAddBooking)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    boolean isValidData() {
       
        boolean result = true;
       


       
        return result;
    }



    private void btnAddBookingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddBookingActionPerformed
        // TODO add your handling code here:

        try {

                
            if (isValidData()) {
                
                //Checks if the Allocation already exists in the table
                String[] routes = cmbRoute.getSelectedItem().toString().split(" -> ");
                
                
                rs = dbCon.executeStatementQuery("Select * from allocation where TrainId = (select TrainID from TRAINLINE where TrainName = '" +cmbTrainLine.getSelectedItem().toString() + "') and RouteID = (select routeID from Routes \n" +
"where origin = (select locationID from location where StationName = '"+routes[0] +"' ) \n" +
"and destination = (select locationID from location where StationName = '"+routes[1] +"' )) and DepartureTime = '"+cmbDepartureTime.getSelectedItem().toString() +"'");
                
                if(!rs.next()){
                    int trainid, routeid;
                    rs = dbCon.executeStatementQuery("select TrainID from TRAINLINE where TrainName = '" +cmbTrainLine.getSelectedItem().toString() + "'");
                    rs.next();
                    trainid = rs.getInt("TrainID");
                    
                    rs = dbCon.executeStatementQuery("select routeID from Routes where origin = (select locationID from location where StationName = '"+routes[0] +"') " + "and destination = (select locationID from location where StationName = '"+routes[1] +"')");
                    rs.next();
                    routeid = rs.getInt("routeID");
                    
                         
                    
                    String prepareSQL = "INSERT INTO ALLOCATION (AllocationID, TrainID, RouteID, DepartureTime,TicketCost) VALUES ("
                        + Integer.parseInt(txtBookingID.getText())
                        + ", " +trainid
                        + ", " + routeid+", '"+cmbDepartureTime.getSelectedItem().toString()+"', " +Double.parseDouble(txtTicketCost.getText())+ ")";
          


                    int result = dbCon.executePreparedStmnt(prepareSQL);

                    if (result > 0) {

                        javax.swing.JLabel label = new javax.swing.JLabel("New Allocation added successfully.");
                        label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                        JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);

                        this.dispose();
                    } else {
                        // check validation errors 
                    }      
                }
                else{
                    JOptionPane.showMessageDialog(this, "Same Allocation Already Exists!!");
                }
                
               
                


            } else {

                javax.swing.JLabel label = new javax.swing.JLabel("Please fix validation errors...");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);

            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error adding new allocation. "+ e);
        }
    }//GEN-LAST:event_btnAddBookingActionPerformed

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnPrevActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
       try {
        
        if(!isSelectedRoute && !isSelectedTrainLine && !isSelectedDepartureTime){

                String[] routes = cmbRoute.getSelectedItem().toString().split(" -> ");
                
                rs=dbCon.executeStatementQuery("select routeID from Routes where origin = (select locationID from location where StationName = '"+routes[0] +"') " + "and destination = (select locationID from location where StationName = '"+routes[1] +"')");
                rs.next();
                routeid = rs.getInt("routeID");
                
                rs=dbCon.executeStatementQuery("select distinct trainid from allocation where routeid = "+routeid);
                while(rs.next()){
                    rs2=dbCon.executeStatementQuery("select TrainName from TRAINLINE where trainid = "+rs.getInt("trainid"));
                    rs2.next();
                    cmbTrainLine.addItem(rs2.getString("TrainName"));
                }
                cmbTrainLine.setEnabled(true);
                isSelectedRoute=true;
        }
        else if (isSelectedRoute && !isSelectedTrainLine && !isSelectedDepartureTime){
            
            String train = cmbTrainLine.getSelectedItem().toString();
            rs=dbCon.executeStatementQuery("select trainid from TRAINLINE where trainname = '"+ train + "'");
            rs.next();
            trainid = rs.getInt("trainID");
            
            rs=dbCon.executeStatementQuery("select DepartureTime from ALLOCATION where TrainID = "+trainid+" and routeid = "+ routeid);
            
            while(rs.next()){
                cmbDepartureTime.addItem(rs.getString("DepartureTime"));
            }
            
            cmbTrainLine.setEnabled(false);
            cmbDepartureTime.setEnabled(true);
            isSelectedTrainLine = true;
        }
        
        else if (isSelectedRoute && isSelectedTrainLine && !isSelectedDepartureTime){
            
            String deptTime = cmbDepartureTime.getSelectedItem().toString();
            rs=dbCon.executeStatementQuery("select TicketCost from ALLOCATION where TrainID = "+trainid+" and routeid = "+ routeid + "and departureTime = '"+deptTime+ "'");
            rs.next();
            txtTicketCost.setText(rs.getString("TicketCost"));
            
            cmbDepartureTime.setEnabled(false);
            isSelectedDepartureTime = true;
        }
        else if(isSelectedRoute && isSelectedTrainLine && !isSelectedDepartureTime){
            
            
            btnAddBooking.setEnabled(true);
        }
        
        
        
       }catch (SQLException ex) {
        Logger.getLogger(AddBooking.class.getName()).log(Level.SEVERE, null, ex);
                }
    }//GEN-LAST:event_btnNextActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddBooking;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrev;
    private javax.swing.JComboBox<String> cmbDepartureTime;
    private javax.swing.JComboBox<String> cmbRoute;
    private javax.swing.JComboBox<String> cmbTrainLine;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField txtBookingID;
    private javax.swing.JTextField txtTicketCost;
    // End of variables declaration//GEN-END:variables
}
