package trainmanagementgui;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author wissam
 */
public class UpdateDeleteAllocation extends javax.swing.JFrame {
    
    myDBCon dbCon;
    ResultSet rs, rs1, rs2;

    /**
     * Creates new form AddEmployee
     */
    public UpdateDeleteAllocation() {
        initComponents();
        this.setLocationRelativeTo(null);

        lblTicketCost.setVisible(false);
        lblDepartureTime.setVisible(false);
        


        dbCon = new myDBCon();
        try {
            rs1 = dbCon.executeStatementQuery("SELECT ROUTES.RouteID, LOCATION.StationName\n" +
                    "FROM ROUTES\n" +
                    "INNER JOIN LOCATION ON ROUTES.Origin=LOCATION.LocationID\n" +
                    "ORDER BY ROUTES.RouteID ASC");
        
            rs2 = dbCon.executeStatementQuery("SELECT ROUTES.RouteID, LOCATION.StationName\n" +
                "FROM ROUTES\n" +
                "INNER JOIN LOCATION ON ROUTES.Destination=LOCATION.LocationID\n" +
                "ORDER BY ROUTES.RouteID ASC");
            
            while(rs1.next()&&rs2.next()){
                cmbRoute.addItem(rs1.getString("StationName") + " -> "+rs2.getString("StationName"));
            }
            
            rs1 = dbCon.executeStatementQuery("SELECT TrainName FROM TRAINLINE ORDER BY TrainID ASC");

            // populate mgr combo box
            while (rs1.next()) {
                cmbTrainLine.addItem(rs1.getString("TrainName"));
                
            }
            

            rs1.close();
            rs2.close();
            
            } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteAllocation.class.getName()).log(Level.SEVERE, null, ex);
        }
            
        getNewData();


    }

    private void getNewData() {

        try {

            rs = dbCon.executeStatementQuery("SELECT * FROM ALLOCATION ORDER BY AllocationID ASC ");
            
            
            

            // populate rest of fields
            rs.beforeFirst();
            rs.first();
            populateFields();
        } catch (SQLException e) {
            javax.swing.JLabel label = new javax.swing.JLabel("SQL Error - Display selected LOCATION");
            label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        txtAllocationID = new javax.swing.JTextField();
        btnNext = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();
        lblDepartureTime = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtDepartureTime = new javax.swing.JTextField();
        lblTicketCost = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cmbTrainLine = new javax.swing.JComboBox<>();
        cmbRoute = new javax.swing.JComboBox<>();
        txtTicketCost = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Update/Delete Employee");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Update/Delete Allocation");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Allocation ID:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("TrainLine:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Route:");

        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        txtAllocationID.setEditable(false);
        txtAllocationID.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        btnNext.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnNext.setText("Next >>");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnPrevious.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnPrevious.setText("<< Previous");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });

        lblDepartureTime.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblDepartureTime.setForeground(new java.awt.Color(255, 0, 0));
        lblDepartureTime.setText("error label");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("Departure Time:");

        txtDepartureTime.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtDepartureTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDepartureTimeActionPerformed(evt);
            }
        });

        lblTicketCost.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblTicketCost.setForeground(new java.awt.Color(255, 0, 0));
        lblTicketCost.setText("error label");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("Ticket Cost ($) : ");

        cmbTrainLine.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        cmbRoute.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        txtTicketCost.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtTicketCost)
                                .addGap(26, 26, 26)
                                .addComponent(lblTicketCost, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(cmbRoute, javax.swing.GroupLayout.Alignment.LEADING, 0, 320, Short.MAX_VALUE)
                                        .addComponent(cmbTrainLine, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(txtAllocationID, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(146, 146, 146))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(txtDepartureTime)
                                                .addGap(26, 26, 26)))
                                        .addComponent(lblDepartureTime, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(jLabel1)))
                .addGap(145, 145, 145))
            .addGroup(layout.createSequentialGroup()
                .addGap(118, 118, 118)
                .addComponent(btnPrevious)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUpdate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDelete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNext)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtAllocationID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cmbTrainLine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(cmbRoute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtDepartureTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDepartureTime))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(lblTicketCost)
                    .addComponent(txtTicketCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(btnNext)
                    .addComponent(btnPrevious))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void populateFields() {
        try {
            txtAllocationID.setText(rs.getString("AllocationID"));
            txtDepartureTime.setText(rs.getString("DepartureTime"));
            txtTicketCost.setText(rs.getString("TicketCost"));
            
            rs2 = dbCon.executeStatementQuery("select TrainName from TRAINLINE where TrainID = " +rs.getInt("TrainID") + "");
            rs2.next();
            cmbTrainLine.setSelectedItem(rs2.getString("TrainName"));
            
            rs2 = dbCon.executeStatementQuery("select StationName from LOCATION where locationID = (select Origin from ROUTES where RouteID ="+rs.getInt("RouteID")  +" )");
            rs2.next();
            String s1 = rs2.getString("StationName");
            rs2 = dbCon.executeStatementQuery("select StationName from LOCATION where locationID = (select Destination from ROUTES where RouteID ="+rs.getInt("RouteID")  +" )");
            rs2.next();
            String s2 = rs2.getString("StationName");
            
            cmbRoute.setSelectedItem(s1 + " -> "+ s2);

         

            rs2.close();
            EnableDisableButtons();
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteAllocation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void MoveNext() {
        try {
            // TODO add your handling code here:

            if (!rs.isLast()) {

                rs.next();
                populateFields();

            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteAllocation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        MoveNext();
    }//GEN-LAST:event_btnNextActionPerformed

    private void MovePrevious() {
        try {
            // TODO add your handling code here:

            if (!rs.isFirst()) {
                rs.previous();
                populateFields();

            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteAllocation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void EnableDisableButtons() {
        try {
            if (rs.isFirst()) {
                btnPrevious.setEnabled(false);
            } else {
                btnPrevious.setEnabled(true);
            }
            if (rs.isLast()) {
                btnNext.setEnabled(false);
            } else {
                btnNext.setEnabled(true);
            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteAllocation.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:

        try {
            int confirm_delete = JOptionPane.showConfirmDialog(this, "Confirm to Delete Allocation?");
            if (confirm_delete == 0) {
            
             //Checks if allocation exists for any booking
            rs2 = dbCon.executeStatementQuery("SELECT * FROM Bookings where AllocationID =" + Integer.parseInt(txtAllocationID.getText().trim()));

            //Deletes the Location if not allocated to any route
            if(!rs2.next()){
                String prepSQL = "DELETE ALLOCATION WHERE AllocationID = " + Integer.parseInt(txtAllocationID.getText().trim());
                int result = dbCon.executePreparedStmnt(prepSQL);

                
                if (result > 0) {
                javax.swing.JLabel label = new javax.swing.JLabel("Allocation ID " + Integer.parseInt(txtAllocationID.getText().trim()) + " deleted successfully.");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                getNewData();
              }
                else {
                    javax.swing.JLabel label = new javax.swing.JLabel("Allocation Delete Failed.");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            }
           
            else{
                 JOptionPane.showMessageDialog(this, "Cannot Delete Allocation. Customers have already booked for the following allocation!!");
            }

            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error deleting Allocation." + e);

        }

    }//GEN-LAST:event_btnDeleteActionPerformed

    void clearErrorLabels() {


        lblDepartureTime.setText("");
        lblDepartureTime.setVisible(false);
        lblTicketCost.setText("");
        lblTicketCost.setVisible(false);


    }

    public boolean isInteger(String s) {
        try {
            Integer.parseInt(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    boolean isValidData() {

        clearErrorLabels(); //clears all error labels
        boolean result = true;
       

        if (!txtDepartureTime.getText().trim().matches("[0-1][0-9]:[0-5][0-9] [A|P]M") || txtDepartureTime.getText().trim().isEmpty()) {
            
            lblDepartureTime.setText("Invalid format. Format Eg. 12:00 PM ");
            lblDepartureTime.setVisible(true);
            result = false;
        }
        
         if (txtTicketCost.getText().trim().isEmpty() || !(isInteger(txtTicketCost.getText().trim()))) {
            if (txtTicketCost.getText().trim().isEmpty()) {
                lblTicketCost.setText("Invalid. Cannot be empty.");
            } else if (!(isInteger(txtTicketCost.getText().trim()))) {
                lblTicketCost.setText("Invalid. Must be number.");
            }

            lblTicketCost.setVisible(true);
            result = false;
        }

        return result;
    }

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:

        try {
            // make the result set scrolable forward/backward updatable
//            statement = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);

            if (isValidData()) {
              //Promts the user to confirm choice              
            int confirm_update = JOptionPane.showConfirmDialog(this, "Confirm To Update Allocation?");
            if (confirm_update == 0) {
                String[] routes = cmbRoute.getSelectedItem().toString().split(" -> ");
                rs2 = dbCon.executeStatementQuery("Select * from allocation where TrainId = (select TrainID from TRAINLINE where TrainName = '" +cmbTrainLine.getSelectedItem().toString() + "') and RouteID = (select routeID from Routes \n" +
"where origin = (select locationID from location where StationName = '"+routes[0] +"' ) \n" +
"and destination = (select locationID from location where StationName = '"+routes[1] +"' )) and DepartureTime = '"+txtDepartureTime.getText() +"' and TicketCost = "+Double.parseDouble(txtTicketCost.getText()));
                if(!rs2.next()){
                     int trainid, routeid;
                    rs2 = dbCon.executeStatementQuery("select TrainID from TRAINLINE where TrainName = '" +cmbTrainLine.getSelectedItem().toString() + "'");
                    rs2.next();
                    trainid = rs2.getInt("TrainID");
                    
                    rs2 = dbCon.executeStatementQuery("select routeID from Routes where origin = (select locationID from location where StationName = '"+routes[0] +"') " + "and destination = (select locationID from location where StationName = '"+routes[1] +"')");
                    rs2.next();
                    routeid = rs2.getInt("routeID");
                    
               String prepareSQL = "UPDATE ALLOCATION SET TrainID = "
                            + trainid
                            + " , RouteID = " + routeid
                            + " , DepartureTime = '" + txtDepartureTime.getText()+"' "
                            + " , TicketCost = " + Double.parseDouble(txtTicketCost.getText())
                            + " WHERE AllocationID = " + Integer.parseInt(txtAllocationID.getText());   

                int result = dbCon.executePreparedStmnt(prepareSQL);

                    
                if (result > 0) {

                    javax.swing.JLabel label = new javax.swing.JLabel("Allocation ID " + Integer.parseInt(txtAllocationID.getText()) + " updated successfully.");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);

                    getNewData();

                } else {
                    // check validation errors 
                }
            }  
                
                else{
                    JOptionPane.showMessageDialog(this, "Cannot Update. Same Allocation Already Exists!!");
                }
                    
                }
                
                

              
            
            } else {

                javax.swing.JLabel label = new javax.swing.JLabel("Please fix validation errors...");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);

            }

        } catch (SQLException e) {

            JOptionPane.showMessageDialog(null, "Error updating Allocation." + e.getMessage());

        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void txtDepartureTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDepartureTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDepartureTimeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbRoute;
    private javax.swing.JComboBox<String> cmbTrainLine;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel lblDepartureTime;
    private javax.swing.JLabel lblTicketCost;
    private javax.swing.JTextField txtAllocationID;
    private javax.swing.JTextField txtDepartureTime;
    private javax.swing.JTextField txtTicketCost;
    // End of variables declaration//GEN-END:variables
}
